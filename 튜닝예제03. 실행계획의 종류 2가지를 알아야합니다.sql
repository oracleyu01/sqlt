🎯 튜닝예제3. 실행계획의 종류 2가지를 알아야합니다

📝 이론 설명

실행계획은 SQL 실행 과정에서 매우 중요한 두 가지 종류가 있습니다:

⚡ 예상 실행계획:
・ SQL을 실행하기 전에 옵티마이져가 생성한 실행계획입니다
・ SQL 실행을 위해 옵티마이져가 수립한 데이터 접근 방법과 경로입니다
・ 이는 현재 시점의 통계정보와 시스템 상태를 기반으로 예측됩니다

⚡ 실제 실행계획:
・ SQL을 실제로 실행할 때 사용한 실제 실행계획입니다
・ 보통은 예상 실행계획과 동일하지만, DB 서버가 부하가 있거나 BUSY하면 실제 실행계획이 달라질 수 있습니다
・ 실제 운영 환경에서는 서버의 상태나 리소스 사용률에 따라 달라질 수 있어 지속적인 모니터링이 필요합니다

💻 실습1: 예상 실행계획 확인하기

select ename, sal
from emp
where ename = 'SCOTT';

➡️ 예상 실행계획 생성 명령:

explain plan for
select ename, sal
from emp
where ename = 'SCOTT';

select * from table(dbms_xplan.display);

💻 실습2: 실제 실행계획 확인하기

먼저 SQL 실행시 튜닝에 필요한 통계정보가 자동 수집되도록 설정:

alter system set statistics_level = all scope=both;

➡️ SQL 실행 후 실제 실행계획 확인:

select ename, sal
from emp
where ename = 'SCOTT';

select * from table(dbms_xplan.display_cursor(null, null, 'ALLSTATS LAST'));

📊 버퍼(Buffer)의 개념과 중요성

・ 버퍼는 데이터베이스의 블록의 복사본입니다
・ SQL 실행 작업 중 소비된 버퍼의 개수를 나타냅니다
・ 예상 실행계획에서는 버퍼 정보가 나타나지 않습니다
・ 실제 실행계획에서만 버퍼 정보를 확인할 수 있습니다
・ 같은 결과를 얻더라도 버퍼의 개수가 적은 SQL이 더 성능이 좋은 SQL입니다
・ 단, 버퍼 개수는 시스템 환경과 데이터 상태에 따라 달라질 수 있습니다

💻  실습3: 인덱스를 통한 성능 개선

문제1. EMP 테이블의 ename에 인덱스를 생성하고 버퍼 개수 변화 확인

🔑 답: 




💡 추가 튜닝 실습

문제2. 다음의 SQL이 성능이 좋아지도록 적절한 인덱스를 생성하시오 

✨튜닝 전:
select empno, ename, sal, job
from emp
where empno = 7788;


✨튜닝 후:




🎓 결론

・ SQL 튜닝시 실제 실행계획의 버퍼 개수를 확인하면 튜닝 전후를 정확히 비교할 수 있습니다
・ 인덱스 생성을 통해 버퍼 사용량을 줄이고 성능을 개선할 수 있습니다
・ 실행계획의 종류를 이해하고 버퍼 개수를 모니터링하는 것이 효과적인 튜닝의 기본입니다
・ 실제 운영 환경에서는 서버의 상태에 따라 실행계획이 달라질 수 있으므로 지속적인 모니터링이 필요합니다
・ 통계정보의 최신성과 정확성이 실행계획 품질에 큰 영향을 미치므로 주기적인 통계정보 갱신이 중요합니다
